// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"sync"

	"github.com/frrist/specs-actors-model/ent/miner"

	"github.com/facebookincubator/ent"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeMiner = "Miner"
)

// MinerMutation represents an operation that mutate the Miners
// nodes in the graph.
type MinerMutation struct {
	config
	op            Op
	typ           string
	id            *int
	state_root    *string
	miner_id      *string
	owner_addr    *string
	worker_addr   *string
	peer_id       *string
	sector_size   *string
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*Miner, error)
}

var _ ent.Mutation = (*MinerMutation)(nil)

// minerOption allows to manage the mutation configuration using functional options.
type minerOption func(*MinerMutation)

// newMinerMutation creates new mutation for $n.Name.
func newMinerMutation(c config, op Op, opts ...minerOption) *MinerMutation {
	m := &MinerMutation{
		config:        c,
		op:            op,
		typ:           TypeMiner,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withMinerID sets the id field of the mutation.
func withMinerID(id int) minerOption {
	return func(m *MinerMutation) {
		var (
			err   error
			once  sync.Once
			value *Miner
		)
		m.oldValue = func(ctx context.Context) (*Miner, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Miner.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withMiner sets the old Miner of the mutation.
func withMiner(node *Miner) minerOption {
	return func(m *MinerMutation) {
		m.oldValue = func(context.Context) (*Miner, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m MinerMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m MinerMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the id value in the mutation. Note that, the id
// is available only if it was provided to the builder.
func (m *MinerMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetStateRoot sets the state_root field.
func (m *MinerMutation) SetStateRoot(s string) {
	m.state_root = &s
}

// StateRoot returns the state_root value in the mutation.
func (m *MinerMutation) StateRoot() (r string, exists bool) {
	v := m.state_root
	if v == nil {
		return
	}
	return *v, true
}

// OldStateRoot returns the old state_root value of the Miner.
// If the Miner object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *MinerMutation) OldStateRoot(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldStateRoot is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldStateRoot requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldStateRoot: %w", err)
	}
	return oldValue.StateRoot, nil
}

// ResetStateRoot reset all changes of the "state_root" field.
func (m *MinerMutation) ResetStateRoot() {
	m.state_root = nil
}

// SetMinerID sets the miner_id field.
func (m *MinerMutation) SetMinerID(s string) {
	m.miner_id = &s
}

// MinerID returns the miner_id value in the mutation.
func (m *MinerMutation) MinerID() (r string, exists bool) {
	v := m.miner_id
	if v == nil {
		return
	}
	return *v, true
}

// OldMinerID returns the old miner_id value of the Miner.
// If the Miner object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *MinerMutation) OldMinerID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldMinerID is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldMinerID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldMinerID: %w", err)
	}
	return oldValue.MinerID, nil
}

// ResetMinerID reset all changes of the "miner_id" field.
func (m *MinerMutation) ResetMinerID() {
	m.miner_id = nil
}

// SetOwnerAddr sets the owner_addr field.
func (m *MinerMutation) SetOwnerAddr(s string) {
	m.owner_addr = &s
}

// OwnerAddr returns the owner_addr value in the mutation.
func (m *MinerMutation) OwnerAddr() (r string, exists bool) {
	v := m.owner_addr
	if v == nil {
		return
	}
	return *v, true
}

// OldOwnerAddr returns the old owner_addr value of the Miner.
// If the Miner object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *MinerMutation) OldOwnerAddr(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldOwnerAddr is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldOwnerAddr requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldOwnerAddr: %w", err)
	}
	return oldValue.OwnerAddr, nil
}

// ResetOwnerAddr reset all changes of the "owner_addr" field.
func (m *MinerMutation) ResetOwnerAddr() {
	m.owner_addr = nil
}

// SetWorkerAddr sets the worker_addr field.
func (m *MinerMutation) SetWorkerAddr(s string) {
	m.worker_addr = &s
}

// WorkerAddr returns the worker_addr value in the mutation.
func (m *MinerMutation) WorkerAddr() (r string, exists bool) {
	v := m.worker_addr
	if v == nil {
		return
	}
	return *v, true
}

// OldWorkerAddr returns the old worker_addr value of the Miner.
// If the Miner object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *MinerMutation) OldWorkerAddr(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldWorkerAddr is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldWorkerAddr requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldWorkerAddr: %w", err)
	}
	return oldValue.WorkerAddr, nil
}

// ResetWorkerAddr reset all changes of the "worker_addr" field.
func (m *MinerMutation) ResetWorkerAddr() {
	m.worker_addr = nil
}

// SetPeerID sets the peer_id field.
func (m *MinerMutation) SetPeerID(s string) {
	m.peer_id = &s
}

// PeerID returns the peer_id value in the mutation.
func (m *MinerMutation) PeerID() (r string, exists bool) {
	v := m.peer_id
	if v == nil {
		return
	}
	return *v, true
}

// OldPeerID returns the old peer_id value of the Miner.
// If the Miner object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *MinerMutation) OldPeerID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldPeerID is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldPeerID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPeerID: %w", err)
	}
	return oldValue.PeerID, nil
}

// ResetPeerID reset all changes of the "peer_id" field.
func (m *MinerMutation) ResetPeerID() {
	m.peer_id = nil
}

// SetSectorSize sets the sector_size field.
func (m *MinerMutation) SetSectorSize(s string) {
	m.sector_size = &s
}

// SectorSize returns the sector_size value in the mutation.
func (m *MinerMutation) SectorSize() (r string, exists bool) {
	v := m.sector_size
	if v == nil {
		return
	}
	return *v, true
}

// OldSectorSize returns the old sector_size value of the Miner.
// If the Miner object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *MinerMutation) OldSectorSize(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldSectorSize is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldSectorSize requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSectorSize: %w", err)
	}
	return oldValue.SectorSize, nil
}

// ResetSectorSize reset all changes of the "sector_size" field.
func (m *MinerMutation) ResetSectorSize() {
	m.sector_size = nil
}

// Op returns the operation name.
func (m *MinerMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Miner).
func (m *MinerMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during
// this mutation. Note that, in order to get all numeric
// fields that were in/decremented, call AddedFields().
func (m *MinerMutation) Fields() []string {
	fields := make([]string, 0, 6)
	if m.state_root != nil {
		fields = append(fields, miner.FieldStateRoot)
	}
	if m.miner_id != nil {
		fields = append(fields, miner.FieldMinerID)
	}
	if m.owner_addr != nil {
		fields = append(fields, miner.FieldOwnerAddr)
	}
	if m.worker_addr != nil {
		fields = append(fields, miner.FieldWorkerAddr)
	}
	if m.peer_id != nil {
		fields = append(fields, miner.FieldPeerID)
	}
	if m.sector_size != nil {
		fields = append(fields, miner.FieldSectorSize)
	}
	return fields
}

// Field returns the value of a field with the given name.
// The second boolean value indicates that this field was
// not set, or was not define in the schema.
func (m *MinerMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case miner.FieldStateRoot:
		return m.StateRoot()
	case miner.FieldMinerID:
		return m.MinerID()
	case miner.FieldOwnerAddr:
		return m.OwnerAddr()
	case miner.FieldWorkerAddr:
		return m.WorkerAddr()
	case miner.FieldPeerID:
		return m.PeerID()
	case miner.FieldSectorSize:
		return m.SectorSize()
	}
	return nil, false
}

// OldField returns the old value of the field from the database.
// An error is returned if the mutation operation is not UpdateOne,
// or the query to the database was failed.
func (m *MinerMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case miner.FieldStateRoot:
		return m.OldStateRoot(ctx)
	case miner.FieldMinerID:
		return m.OldMinerID(ctx)
	case miner.FieldOwnerAddr:
		return m.OldOwnerAddr(ctx)
	case miner.FieldWorkerAddr:
		return m.OldWorkerAddr(ctx)
	case miner.FieldPeerID:
		return m.OldPeerID(ctx)
	case miner.FieldSectorSize:
		return m.OldSectorSize(ctx)
	}
	return nil, fmt.Errorf("unknown Miner field %s", name)
}

// SetField sets the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *MinerMutation) SetField(name string, value ent.Value) error {
	switch name {
	case miner.FieldStateRoot:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStateRoot(v)
		return nil
	case miner.FieldMinerID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetMinerID(v)
		return nil
	case miner.FieldOwnerAddr:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetOwnerAddr(v)
		return nil
	case miner.FieldWorkerAddr:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetWorkerAddr(v)
		return nil
	case miner.FieldPeerID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPeerID(v)
		return nil
	case miner.FieldSectorSize:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSectorSize(v)
		return nil
	}
	return fmt.Errorf("unknown Miner field %s", name)
}

// AddedFields returns all numeric fields that were incremented
// or decremented during this mutation.
func (m *MinerMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was in/decremented
// from a field with the given name. The second value indicates
// that this field was not set, or was not define in the schema.
func (m *MinerMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *MinerMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Miner numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared
// during this mutation.
func (m *MinerMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicates if this field was
// cleared in this mutation.
func (m *MinerMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value for the given name. It returns an
// error if the field is not defined in the schema.
func (m *MinerMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Miner nullable field %s", name)
}

// ResetField resets all changes in the mutation regarding the
// given field name. It returns an error if the field is not
// defined in the schema.
func (m *MinerMutation) ResetField(name string) error {
	switch name {
	case miner.FieldStateRoot:
		m.ResetStateRoot()
		return nil
	case miner.FieldMinerID:
		m.ResetMinerID()
		return nil
	case miner.FieldOwnerAddr:
		m.ResetOwnerAddr()
		return nil
	case miner.FieldWorkerAddr:
		m.ResetWorkerAddr()
		return nil
	case miner.FieldPeerID:
		m.ResetPeerID()
		return nil
	case miner.FieldSectorSize:
		m.ResetSectorSize()
		return nil
	}
	return fmt.Errorf("unknown Miner field %s", name)
}

// AddedEdges returns all edge names that were set/added in this
// mutation.
func (m *MinerMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all ids (to other nodes) that were added for
// the given edge name.
func (m *MinerMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this
// mutation.
func (m *MinerMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all ids (to other nodes) that were removed for
// the given edge name.
func (m *MinerMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this
// mutation.
func (m *MinerMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean indicates if this edge was
// cleared in this mutation.
func (m *MinerMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value for the given name. It returns an
// error if the edge name is not defined in the schema.
func (m *MinerMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown Miner unique edge %s", name)
}

// ResetEdge resets all changes in the mutation regarding the
// given edge name. It returns an error if the edge is not
// defined in the schema.
func (m *MinerMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown Miner edge %s", name)
}
