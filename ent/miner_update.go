// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"

	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/facebookincubator/ent/schema/field"
	"github.com/frrist/specs-actors-model/ent/miner"
	"github.com/frrist/specs-actors-model/ent/predicate"
)

// MinerUpdate is the builder for updating Miner entities.
type MinerUpdate struct {
	config
	hooks      []Hook
	mutation   *MinerMutation
	predicates []predicate.Miner
}

// Where adds a new predicate for the builder.
func (mu *MinerUpdate) Where(ps ...predicate.Miner) *MinerUpdate {
	mu.predicates = append(mu.predicates, ps...)
	return mu
}

// SetStateRoot sets the state_root field.
func (mu *MinerUpdate) SetStateRoot(s string) *MinerUpdate {
	mu.mutation.SetStateRoot(s)
	return mu
}

// SetMinerID sets the miner_id field.
func (mu *MinerUpdate) SetMinerID(s string) *MinerUpdate {
	mu.mutation.SetMinerID(s)
	return mu
}

// SetOwnerAddr sets the owner_addr field.
func (mu *MinerUpdate) SetOwnerAddr(s string) *MinerUpdate {
	mu.mutation.SetOwnerAddr(s)
	return mu
}

// SetWorkerAddr sets the worker_addr field.
func (mu *MinerUpdate) SetWorkerAddr(s string) *MinerUpdate {
	mu.mutation.SetWorkerAddr(s)
	return mu
}

// SetPeerID sets the peer_id field.
func (mu *MinerUpdate) SetPeerID(s string) *MinerUpdate {
	mu.mutation.SetPeerID(s)
	return mu
}

// SetSectorSize sets the sector_size field.
func (mu *MinerUpdate) SetSectorSize(s string) *MinerUpdate {
	mu.mutation.SetSectorSize(s)
	return mu
}

// Mutation returns the MinerMutation object of the builder.
func (mu *MinerUpdate) Mutation() *MinerMutation {
	return mu.mutation
}

// Save executes the query and returns the number of rows/vertices matched by this operation.
func (mu *MinerUpdate) Save(ctx context.Context) (int, error) {
	if v, ok := mu.mutation.MinerID(); ok {
		if err := miner.MinerIDValidator(v); err != nil {
			return 0, &ValidationError{Name: "miner_id", err: fmt.Errorf("ent: validator failed for field \"miner_id\": %w", err)}
		}
	}
	if v, ok := mu.mutation.OwnerAddr(); ok {
		if err := miner.OwnerAddrValidator(v); err != nil {
			return 0, &ValidationError{Name: "owner_addr", err: fmt.Errorf("ent: validator failed for field \"owner_addr\": %w", err)}
		}
	}
	if v, ok := mu.mutation.WorkerAddr(); ok {
		if err := miner.WorkerAddrValidator(v); err != nil {
			return 0, &ValidationError{Name: "worker_addr", err: fmt.Errorf("ent: validator failed for field \"worker_addr\": %w", err)}
		}
	}
	if v, ok := mu.mutation.SectorSize(); ok {
		if err := miner.SectorSizeValidator(v); err != nil {
			return 0, &ValidationError{Name: "sector_size", err: fmt.Errorf("ent: validator failed for field \"sector_size\": %w", err)}
		}
	}
	var (
		err      error
		affected int
	)
	if len(mu.hooks) == 0 {
		affected, err = mu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*MinerMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			mu.mutation = mutation
			affected, err = mu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(mu.hooks) - 1; i >= 0; i-- {
			mut = mu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, mu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (mu *MinerUpdate) SaveX(ctx context.Context) int {
	affected, err := mu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (mu *MinerUpdate) Exec(ctx context.Context) error {
	_, err := mu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mu *MinerUpdate) ExecX(ctx context.Context) {
	if err := mu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (mu *MinerUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   miner.Table,
			Columns: miner.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: miner.FieldID,
			},
		},
	}
	if ps := mu.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := mu.mutation.StateRoot(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: miner.FieldStateRoot,
		})
	}
	if value, ok := mu.mutation.MinerID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: miner.FieldMinerID,
		})
	}
	if value, ok := mu.mutation.OwnerAddr(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: miner.FieldOwnerAddr,
		})
	}
	if value, ok := mu.mutation.WorkerAddr(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: miner.FieldWorkerAddr,
		})
	}
	if value, ok := mu.mutation.PeerID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: miner.FieldPeerID,
		})
	}
	if value, ok := mu.mutation.SectorSize(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: miner.FieldSectorSize,
		})
	}
	if n, err = sqlgraph.UpdateNodes(ctx, mu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{miner.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// MinerUpdateOne is the builder for updating a single Miner entity.
type MinerUpdateOne struct {
	config
	hooks    []Hook
	mutation *MinerMutation
}

// SetStateRoot sets the state_root field.
func (muo *MinerUpdateOne) SetStateRoot(s string) *MinerUpdateOne {
	muo.mutation.SetStateRoot(s)
	return muo
}

// SetMinerID sets the miner_id field.
func (muo *MinerUpdateOne) SetMinerID(s string) *MinerUpdateOne {
	muo.mutation.SetMinerID(s)
	return muo
}

// SetOwnerAddr sets the owner_addr field.
func (muo *MinerUpdateOne) SetOwnerAddr(s string) *MinerUpdateOne {
	muo.mutation.SetOwnerAddr(s)
	return muo
}

// SetWorkerAddr sets the worker_addr field.
func (muo *MinerUpdateOne) SetWorkerAddr(s string) *MinerUpdateOne {
	muo.mutation.SetWorkerAddr(s)
	return muo
}

// SetPeerID sets the peer_id field.
func (muo *MinerUpdateOne) SetPeerID(s string) *MinerUpdateOne {
	muo.mutation.SetPeerID(s)
	return muo
}

// SetSectorSize sets the sector_size field.
func (muo *MinerUpdateOne) SetSectorSize(s string) *MinerUpdateOne {
	muo.mutation.SetSectorSize(s)
	return muo
}

// Mutation returns the MinerMutation object of the builder.
func (muo *MinerUpdateOne) Mutation() *MinerMutation {
	return muo.mutation
}

// Save executes the query and returns the updated entity.
func (muo *MinerUpdateOne) Save(ctx context.Context) (*Miner, error) {
	if v, ok := muo.mutation.MinerID(); ok {
		if err := miner.MinerIDValidator(v); err != nil {
			return nil, &ValidationError{Name: "miner_id", err: fmt.Errorf("ent: validator failed for field \"miner_id\": %w", err)}
		}
	}
	if v, ok := muo.mutation.OwnerAddr(); ok {
		if err := miner.OwnerAddrValidator(v); err != nil {
			return nil, &ValidationError{Name: "owner_addr", err: fmt.Errorf("ent: validator failed for field \"owner_addr\": %w", err)}
		}
	}
	if v, ok := muo.mutation.WorkerAddr(); ok {
		if err := miner.WorkerAddrValidator(v); err != nil {
			return nil, &ValidationError{Name: "worker_addr", err: fmt.Errorf("ent: validator failed for field \"worker_addr\": %w", err)}
		}
	}
	if v, ok := muo.mutation.SectorSize(); ok {
		if err := miner.SectorSizeValidator(v); err != nil {
			return nil, &ValidationError{Name: "sector_size", err: fmt.Errorf("ent: validator failed for field \"sector_size\": %w", err)}
		}
	}
	var (
		err  error
		node *Miner
	)
	if len(muo.hooks) == 0 {
		node, err = muo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*MinerMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			muo.mutation = mutation
			node, err = muo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(muo.hooks) - 1; i >= 0; i-- {
			mut = muo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, muo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (muo *MinerUpdateOne) SaveX(ctx context.Context) *Miner {
	m, err := muo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return m
}

// Exec executes the query on the entity.
func (muo *MinerUpdateOne) Exec(ctx context.Context) error {
	_, err := muo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (muo *MinerUpdateOne) ExecX(ctx context.Context) {
	if err := muo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (muo *MinerUpdateOne) sqlSave(ctx context.Context) (m *Miner, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   miner.Table,
			Columns: miner.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: miner.FieldID,
			},
		},
	}
	id, ok := muo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing Miner.ID for update")}
	}
	_spec.Node.ID.Value = id
	if value, ok := muo.mutation.StateRoot(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: miner.FieldStateRoot,
		})
	}
	if value, ok := muo.mutation.MinerID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: miner.FieldMinerID,
		})
	}
	if value, ok := muo.mutation.OwnerAddr(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: miner.FieldOwnerAddr,
		})
	}
	if value, ok := muo.mutation.WorkerAddr(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: miner.FieldWorkerAddr,
		})
	}
	if value, ok := muo.mutation.PeerID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: miner.FieldPeerID,
		})
	}
	if value, ok := muo.mutation.SectorSize(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: miner.FieldSectorSize,
		})
	}
	m = &Miner{config: muo.config}
	_spec.Assign = m.assignValues
	_spec.ScanValues = m.scanValues()
	if err = sqlgraph.UpdateNode(ctx, muo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{miner.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return m, nil
}
