// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/facebookincubator/ent/schema/field"
	"github.com/frrist/specs-actors-model/ent/miner"
)

// MinerCreate is the builder for creating a Miner entity.
type MinerCreate struct {
	config
	mutation *MinerMutation
	hooks    []Hook
}

// SetStateRoot sets the state_root field.
func (mc *MinerCreate) SetStateRoot(s string) *MinerCreate {
	mc.mutation.SetStateRoot(s)
	return mc
}

// SetMinerID sets the miner_id field.
func (mc *MinerCreate) SetMinerID(s string) *MinerCreate {
	mc.mutation.SetMinerID(s)
	return mc
}

// SetOwnerAddr sets the owner_addr field.
func (mc *MinerCreate) SetOwnerAddr(s string) *MinerCreate {
	mc.mutation.SetOwnerAddr(s)
	return mc
}

// SetWorkerAddr sets the worker_addr field.
func (mc *MinerCreate) SetWorkerAddr(s string) *MinerCreate {
	mc.mutation.SetWorkerAddr(s)
	return mc
}

// SetPeerID sets the peer_id field.
func (mc *MinerCreate) SetPeerID(s string) *MinerCreate {
	mc.mutation.SetPeerID(s)
	return mc
}

// SetSectorSize sets the sector_size field.
func (mc *MinerCreate) SetSectorSize(s string) *MinerCreate {
	mc.mutation.SetSectorSize(s)
	return mc
}

// Mutation returns the MinerMutation object of the builder.
func (mc *MinerCreate) Mutation() *MinerMutation {
	return mc.mutation
}

// Save creates the Miner in the database.
func (mc *MinerCreate) Save(ctx context.Context) (*Miner, error) {
	if err := mc.preSave(); err != nil {
		return nil, err
	}
	var (
		err  error
		node *Miner
	)
	if len(mc.hooks) == 0 {
		node, err = mc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*MinerMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			mc.mutation = mutation
			node, err = mc.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(mc.hooks) - 1; i >= 0; i-- {
			mut = mc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, mc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (mc *MinerCreate) SaveX(ctx context.Context) *Miner {
	v, err := mc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (mc *MinerCreate) preSave() error {
	if _, ok := mc.mutation.StateRoot(); !ok {
		return &ValidationError{Name: "state_root", err: errors.New("ent: missing required field \"state_root\"")}
	}
	if _, ok := mc.mutation.MinerID(); !ok {
		return &ValidationError{Name: "miner_id", err: errors.New("ent: missing required field \"miner_id\"")}
	}
	if v, ok := mc.mutation.MinerID(); ok {
		if err := miner.MinerIDValidator(v); err != nil {
			return &ValidationError{Name: "miner_id", err: fmt.Errorf("ent: validator failed for field \"miner_id\": %w", err)}
		}
	}
	if _, ok := mc.mutation.OwnerAddr(); !ok {
		return &ValidationError{Name: "owner_addr", err: errors.New("ent: missing required field \"owner_addr\"")}
	}
	if v, ok := mc.mutation.OwnerAddr(); ok {
		if err := miner.OwnerAddrValidator(v); err != nil {
			return &ValidationError{Name: "owner_addr", err: fmt.Errorf("ent: validator failed for field \"owner_addr\": %w", err)}
		}
	}
	if _, ok := mc.mutation.WorkerAddr(); !ok {
		return &ValidationError{Name: "worker_addr", err: errors.New("ent: missing required field \"worker_addr\"")}
	}
	if v, ok := mc.mutation.WorkerAddr(); ok {
		if err := miner.WorkerAddrValidator(v); err != nil {
			return &ValidationError{Name: "worker_addr", err: fmt.Errorf("ent: validator failed for field \"worker_addr\": %w", err)}
		}
	}
	if _, ok := mc.mutation.PeerID(); !ok {
		return &ValidationError{Name: "peer_id", err: errors.New("ent: missing required field \"peer_id\"")}
	}
	if _, ok := mc.mutation.SectorSize(); !ok {
		return &ValidationError{Name: "sector_size", err: errors.New("ent: missing required field \"sector_size\"")}
	}
	if v, ok := mc.mutation.SectorSize(); ok {
		if err := miner.SectorSizeValidator(v); err != nil {
			return &ValidationError{Name: "sector_size", err: fmt.Errorf("ent: validator failed for field \"sector_size\": %w", err)}
		}
	}
	return nil
}

func (mc *MinerCreate) sqlSave(ctx context.Context) (*Miner, error) {
	m, _spec := mc.createSpec()
	if err := sqlgraph.CreateNode(ctx, mc.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	m.ID = int(id)
	return m, nil
}

func (mc *MinerCreate) createSpec() (*Miner, *sqlgraph.CreateSpec) {
	var (
		m     = &Miner{config: mc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: miner.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: miner.FieldID,
			},
		}
	)
	if value, ok := mc.mutation.StateRoot(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: miner.FieldStateRoot,
		})
		m.StateRoot = value
	}
	if value, ok := mc.mutation.MinerID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: miner.FieldMinerID,
		})
		m.MinerID = value
	}
	if value, ok := mc.mutation.OwnerAddr(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: miner.FieldOwnerAddr,
		})
		m.OwnerAddr = value
	}
	if value, ok := mc.mutation.WorkerAddr(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: miner.FieldWorkerAddr,
		})
		m.WorkerAddr = value
	}
	if value, ok := mc.mutation.PeerID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: miner.FieldPeerID,
		})
		m.PeerID = value
	}
	if value, ok := mc.mutation.SectorSize(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: miner.FieldSectorSize,
		})
		m.SectorSize = value
	}
	return m, _spec
}

// MinerCreateBulk is the builder for creating a bulk of Miner entities.
type MinerCreateBulk struct {
	config
	builders []*MinerCreate
}

// Save creates the Miner entities in the database.
func (mcb *MinerCreateBulk) Save(ctx context.Context) ([]*Miner, error) {
	specs := make([]*sqlgraph.CreateSpec, len(mcb.builders))
	nodes := make([]*Miner, len(mcb.builders))
	mutators := make([]Mutator, len(mcb.builders))
	for i := range mcb.builders {
		func(i int, root context.Context) {
			builder := mcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				if err := builder.preSave(); err != nil {
					return nil, err
				}
				mutation, ok := m.(*MinerMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, mcb.builders[i+1].mutation)
				} else {
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, mcb.driver, &sqlgraph.BatchCreateSpec{Nodes: specs}); err != nil {
						if cerr, ok := isSQLConstraintError(err); ok {
							err = cerr
						}
					}
				}
				mutation.done = true
				if err != nil {
					return nil, err
				}
				id := specs[i].ID.Value.(int64)
				nodes[i].ID = int(id)
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, mcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX calls Save and panics if Save returns an error.
func (mcb *MinerCreateBulk) SaveX(ctx context.Context) []*Miner {
	v, err := mcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}
