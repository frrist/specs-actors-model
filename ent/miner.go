// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/frrist/specs-actors-model/ent/miner"
)

// Miner is the model entity for the Miner schema.
type Miner struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// StateRoot holds the value of the "state_root" field.
	StateRoot string `json:"state_root,omitempty"`
	// MinerID holds the value of the "miner_id" field.
	MinerID string `json:"miner_id,omitempty"`
	// OwnerAddr holds the value of the "owner_addr" field.
	OwnerAddr string `json:"owner_addr,omitempty"`
	// WorkerAddr holds the value of the "worker_addr" field.
	WorkerAddr string `json:"worker_addr,omitempty"`
	// PeerID holds the value of the "peer_id" field.
	PeerID string `json:"peer_id,omitempty"`
	// SectorSize holds the value of the "sector_size" field.
	SectorSize string `json:"sector_size,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Miner) scanValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{},  // id
		&sql.NullString{}, // state_root
		&sql.NullString{}, // miner_id
		&sql.NullString{}, // owner_addr
		&sql.NullString{}, // worker_addr
		&sql.NullString{}, // peer_id
		&sql.NullString{}, // sector_size
	}
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Miner fields.
func (m *Miner) assignValues(values ...interface{}) error {
	if m, n := len(values), len(miner.Columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	value, ok := values[0].(*sql.NullInt64)
	if !ok {
		return fmt.Errorf("unexpected type %T for field id", value)
	}
	m.ID = int(value.Int64)
	values = values[1:]
	if value, ok := values[0].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field state_root", values[0])
	} else if value.Valid {
		m.StateRoot = value.String
	}
	if value, ok := values[1].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field miner_id", values[1])
	} else if value.Valid {
		m.MinerID = value.String
	}
	if value, ok := values[2].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field owner_addr", values[2])
	} else if value.Valid {
		m.OwnerAddr = value.String
	}
	if value, ok := values[3].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field worker_addr", values[3])
	} else if value.Valid {
		m.WorkerAddr = value.String
	}
	if value, ok := values[4].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field peer_id", values[4])
	} else if value.Valid {
		m.PeerID = value.String
	}
	if value, ok := values[5].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field sector_size", values[5])
	} else if value.Valid {
		m.SectorSize = value.String
	}
	return nil
}

// Update returns a builder for updating this Miner.
// Note that, you need to call Miner.Unwrap() before calling this method, if this Miner
// was returned from a transaction, and the transaction was committed or rolled back.
func (m *Miner) Update() *MinerUpdateOne {
	return (&MinerClient{config: m.config}).UpdateOne(m)
}

// Unwrap unwraps the entity that was returned from a transaction after it was closed,
// so that all next queries will be executed through the driver which created the transaction.
func (m *Miner) Unwrap() *Miner {
	tx, ok := m.config.driver.(*txDriver)
	if !ok {
		panic("ent: Miner is not a transactional entity")
	}
	m.config.driver = tx.drv
	return m
}

// String implements the fmt.Stringer.
func (m *Miner) String() string {
	var builder strings.Builder
	builder.WriteString("Miner(")
	builder.WriteString(fmt.Sprintf("id=%v", m.ID))
	builder.WriteString(", state_root=")
	builder.WriteString(m.StateRoot)
	builder.WriteString(", miner_id=")
	builder.WriteString(m.MinerID)
	builder.WriteString(", owner_addr=")
	builder.WriteString(m.OwnerAddr)
	builder.WriteString(", worker_addr=")
	builder.WriteString(m.WorkerAddr)
	builder.WriteString(", peer_id=")
	builder.WriteString(m.PeerID)
	builder.WriteString(", sector_size=")
	builder.WriteString(m.SectorSize)
	builder.WriteByte(')')
	return builder.String()
}

// Miners is a parsable slice of Miner.
type Miners []*Miner

func (m Miners) config(cfg config) {
	for _i := range m {
		m[_i].config = cfg
	}
}
